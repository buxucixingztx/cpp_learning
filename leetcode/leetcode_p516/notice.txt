力扣516题，最长回文子序列
给定一个字符串s, 找到其中最长的回文子序列，并返回该序列的长度。可以假设s的最大长度为1000。

这道题还是挺难的。想了好久也没有想出来解决方法，倒不是没有思路，只是越想越复杂。
后来看了题解才恍然大悟，原来考察的是动态规划，如果是用动态规划来做的话，就会比较清晰，代码也易于实现。

使用动态规划，就需要用到dp数组，找状态转移关系。一般来说，有两种思路。
１、第一种思路模板是一个一维dp数组：
int n = array.length;
int [] dp = new int[n];

for (int i = 1; i < n; i++)
{
    for (int j = 0; j < i; j++)
    {
        dp[i] = max(dp[i], dp[j] + ...)
    }
}


２、第二种思路模板是一个二维的dp数组：
int n = arr.length;
int [] [] dp = new dp[n][n];

for (int i = 0; i < n; i++)
{
    for (int j = 0; j < n; j++)
    {
        if (arr[i] == arr[j])
            dp[i][j] = dp[i][j] + ...
        else
            dp[i][j] = 最值(...)
    }
}
这种思路运用相对更多一些，尤其是涉及两个字符串/数组的子序列，比如[最长公共子序列]。
这种思路中dp数组含义又分为[只涉及一个字符串]和[涉及两个字符串]两种情况。



