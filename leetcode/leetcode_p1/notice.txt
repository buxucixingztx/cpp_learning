力扣第一题是一个比较简单的题目，使用双层循环就能很快得到结果，但也可以使用新的数据结构来进行解答 -- 哈希表

这里使用的是c++中的 unordered_map
#include <unordered_map>

与map的区别：
map: map内部实现了一个红黑树，该结构具有自动排序的功能，因此map内部的所有元素都是有序的。
unordered_map: unordered_map内部实现了一个哈希表，因此其元素的排列顺序是杂乱的，无序的。

优缺点：
优点：因为内部实现了哈希表，因此其查找速度非常快
缺点：哈希表的建立比较耗费时间。
对于查找问题，unordered_map会更加高效，因此遇到查找问题，常会考虑用unordered_map。

/*
    unordered_map的常用方法：
    unordered_map<string, int> a;
    1. a.empty()  a.size()  前者是判别a是否为空，后者是返回a中所有键值对的数量
    2. a.begin()  a.end()   分别返回指向第一个元素和最后一个元素的迭代器
    3. a.insert({"abc", 10}) 往a中插入一对元素其中插入的值还可以是两个迭代器之间的一个范围的数据
    4. a.erase()            删除指定的键值对，或者指定区间上的
    5. a.find(elem)         查找elem是否在a中，如果存在返回的是elem对应的迭代器，如果不存在返回时a.end()
*/

---------------------- 下面是示例代码 ----------------------
#include <unordered_map>
#include <vector>
#include <iostream>
#include <string>
using namespace std;

void Print_map(unordered_map<string, string> m)
{
    for (auto x: m)
    {
        cout << x.first << ": " << x.second << endl;
    }
}

int main()
{
    unordered_map<string, string> mymap;

    mymap["U.S."] = "Washington";
    mymap["U.K"] = "London";
    mymap["France"] = "Paris";
    mymap["Russia"] = "Moscow";
    mymap["China"] = "Beijing";
    mymap["Germany"] = "Berlin";
    mymap["Japan"] = "Tokyo";

    cout << "mymap是否为空：" << mymap.empty() << endl;
    cout << "mymap中键值对的数量为：" << mymap.size() << endl;
    cout << "输出所有键值对：" << endl;

    Print_map(mymap);

    cout << "删除第一个元素：" << endl;
    mymap.erase(mymap.begin());

    Print_map(mymap);

    cout << "删除Japan对应的键值对" << endl;
    mymap.erase("Japan");
    Print_map(mymap);

    cout << "查找是否有China" << endl;
    auto search = mymap.find("China");
    if (search != mymap.end())
        cout << search->first << ": " << search->second << endl;
    else
        cout << "not found" << endl;

    cout << "插入一个元素" << endl;
    mymap.insert({"U.S.", "Washington"});

    Print_map(mymap);

    return 0;
 }
