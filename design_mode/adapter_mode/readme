c++常用设计模式  --- 适配器模式
参考博客：https://www.cnblogs.com/chengjundu/p/8473564.html

适配器模式可以将一个类的接口转换成客户端希望的另一个接口，使得原来由于接口不兼容而不能在一起工作的那些类可以在一起工作。
通俗的讲就是当我们已经有一些类，而这些类不能慢满足新的需求，此时就可以考虑是否能将现有的类适配成可以满足新需求的类。适配器类
需要继承或依赖已有的类，实现想要的目标接口。

缺点：过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统
如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不适用适配器，而是直接对系统进行重构。


下面有两种实现方式:
1. 使用复合实现适配器模式
关键代码：适配器依赖已有的对象，实现想要的目标接口。
步骤：
    先定义被适配类，实现具体的方法；
    定义抽象目标类，定义待实现的虚函数；
    定义具体目标类，继承抽象目标类，构造函数接受被适配类实例，调用被适配类实例方法来实现具体的虚函数；

2. 使用继承实现适配器模式
关键代码：适配器继承已有对象，调用已有对象的方法来实现想要的目标接口
步骤：
    先定义被适配类，实现具体的方法；
    定义抽象目标类，定义待实现的虚函数；
    定义具体的目标类，继承抽象目标类和被适配类，调用被适配类方法来实现具体的虚函数。